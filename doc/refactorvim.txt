*refactorvim.txt*  Refactoring vimscript plugins

Version:        0.2.0
Release Date:   2019-11-18

===============================================================================
Contents ~

    1. Introduction ............................. |introduction|
    2. Commands ................................. |commands|
    3. Mappings ................................. |mappings|
    4. Functions ................................ |functions|
    5. Complementary Plugins .................... |complementary-plugins|
    6. Changelog ................................ |changelog|
    7. License .................................. |license|

===============================================================================
INTRODUCTION                                                     *introduction*

Refactorvim is a small Vim plugin for refactoring vimscript plugins.

It provides an ftplugin for 'vim' files and therefore is only active when the
current buffer has filetype 'vim'.

Currently it only provides functionality to rename and move autoload functions.

Refactorvim is designed to refactor the codebase of a single Vim plugin.
Therefore it operates in the whole plugin directory of the currently edited
file.

===============================================================================
COMMANDS                                                             *commands*

Refactorvim provides the following command:

-------------------------------------------------------------------------------
                                                           *:RefactorvimRename*
:RefactorvimMoveFunction {source} {target}

    Rename an autoload function or an autoload namespace.

    This can be used to rename a function without changing its namespace.

        For example when moving function 'foo#bar#frobnitz' to 'foo#bar#qux'~
        the resulting function name will be 'foo#bar#qux'.                  ~

    It can also be used to rename a function including its namespace. This
    involves moving the function declaration to the autoload file
    corresponding to the new namespace.

        For example when moving function 'foo#bar#frobnitz' to 'baz#qux' the~
        resulting function name will be 'baz#qux#frobnitz'.                 ~

    It can also be used to rename a whole autoload namespace. This involves
    moving the file corresponding to the original namepace to the file
    corresponding to the new namespace.

        For example when moving namespace 'foo#bar#' to 'baz#qux' the       ~
        new function name of 'foo#bar#frobnitz' will be 'baz#qux#frobnitz'. ~

    In all cases references to the affected functions are update in the whole
    project.

    This command has some internal logic decide whether the given arguments
    are a function or a namespace. This is done in the following order:

        - if the given name ends with '()' it is considered a function

        - if the given name ends with '#' it is considere a namespace

        - if a function with the given name exists it is considered a function

        - if an autoload vim script with the path corresponding to the given
          name exists it is considered a namespace

        - otherwise the meaning is unclear and an error will be displayed

    To make the meaning clear always provide the '()' or '#' suffix.

    This command takes two parameters.

        1. {source} The function or namespace to rename.

        2. {target} The new name of the function or namespace.

    The command supports completion for both parameters via 'tab' key.

    Additionally a commandline mode mapping is defined to fill in the current
    autoload function (see below).

    Be aware that this does not check for referenced script-local variables
    and functions. Therefore after such a refactoring it may be possible that
    the code isn't directly runnable without further adaptations.

===============================================================================
MAPPINGS                                                             *mappings*

Refactorvim provides the following mapping:

|mapmode-c|                          *<Plug>(RefactorvimCurrentAutoloadFunction)*
<Plug>(RefactorvimCurrentAutoloadFunction) 

    A commanline mode mapping for detecting the autoload function to operate
    on.

    If the cursor is currently on the name of an autoload function, that name
    is returned.

    If the cursor is somewhere inside an autoload function in a comment
    directly preceding an autoload function (without any blank lines between)
    the name of that function is returned.

    Otherwise nothing is returned.

    By default this mapping is mapped to '<C-R><C-N>'

    To map it to a different key, use something like:
>
        cmap {newmapping} <Plug>(RefactorvimCurrentAutoloadFunction)
<

===============================================================================
FUNCTIONS                                                           *functions*

Refactorvim provides the following functions:

                                *refactorvim#renaming#get_autoload_functions()*
refactorvim#renaming#get_autoload_functions() 

    Returns the names of all autoload functions in the current project as a
    list.

    The names don't include the trailing '()' characters.

    This function is used interally to provide completion of command arguments
    to |:RefactorvimRename|.    

                               *refactorvim#renaming#get_autoload_namespaces()*
refactorvim#renaming#get_autoload_namespaces() 

    Returns the names of all autoload namespaces in the current project as a
    list.

    The names don't include the trailing '#' character.

    This function is used interally to provide completion of command arguments
    to |:RefactorvimRename|.

                         *refactorvim#renaming#get_current_autoload_function()*
refactorvim#renaming#get_current_autoload_function() 

    Returns the name of the autoload function the cursor is currently in.

    See |<Plug>(RefactorvimCurrentAutoloadFunction)| for a detailled
    description and the default mapping that is assigned to that function.

                                                *refactorvim#renaming#rename()*
refactorvim#renaming#rename({source}, {target}) 

    Renames an autoload function or namespace including necessary renaming and
    copying of files due to changed namespaces.

    This function is by default provided via the |:RefactorvimRename|
    command.

    See |:RefactorvimRename| for a detailled description of the provided
    functionality.

===============================================================================
COMPLEMENTARY PLUGINS                                   *complementary-plugins*

machakann/vim-Verdin

    Provides an omni completion function for Vim script.

    https://github.com/machakann/vim-Verdin

tpope/vim-scriptease

    Provides handy commands for writing Vim plugins.

    https://github.com/tpope/vim-scriptease

WolfgangMehner/vim-support

    Provides snippets, template and mappings for writing Vim plugins.

    https://github.com/WolfgangMehner/vim-support

===============================================================================
CHANGELOG                                                           *changelog*

    0.2.0 .................................................... 2019-11-18

        - Combine rename and move commands

    0.1.0 .................................................... 2019-11-10

        - Initial release

===============================================================================
LICENSE                                                               *license*

This plugin is licensed under the terms of the MIT License.

http://opensource.org/licenses/MIT

===============================================================================
vim: set ft=help tw=78 sw=4 :
